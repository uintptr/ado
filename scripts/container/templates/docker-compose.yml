  services:
    nginx:
      container_name: nginx
      restart: unless-stopped
      image: nginx:latest
      ports:
        - "443:443"
      depends_on:
        - webdis
        - worker
        - server

      volumes:
        - ./conf.d:/etc/nginx/conf.d/
        - ./certs:/etc/certs/
        - __WWW_ROOT__:/var/www/

    webdis:
      image: nicolas/webdis:latest
      container_name: webdis
      depends_on:
        - redis
      volumes:
        - ./webdis/webdis.prod.json:/etc/webdis.prod.json
      environment:
        - REDIS_HOST=redis
        - REDIS_PORT=6379
      restart: unless-stopped
    redis:
      image: redis
      command: --save 60 1 --loglevel warning
      restart: unless-stopped
      container_name: redis
      volumes:
        - ./data/redis:/data
      healthcheck:
        test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
        start_period: 20s
        interval: 30s
        retries: 5
        timeout: 3s

# authentik
    postgresql:
      image: docker.io/library/postgres:16-alpine
      restart: unless-stopped
      healthcheck:
        test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
        start_period: 20s
        interval: 30s
        retries: 5
        timeout: 5s
      volumes:
        - ./data/postgresql:/var/lib/postgresql/data
      environment:
        POSTGRES_PASSWORD: ${PG_PASS:?database password required}
        POSTGRES_USER: ${PG_USER:-authentik}
        POSTGRES_DB: ${PG_DB:-authentik}
      env_file:
        - .env

    server:
      image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.6.4}
      restart: unless-stopped
      command: server
      environment:
        AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
        AUTHENTIK_REDIS__HOST: redis
        AUTHENTIK_POSTGRESQL__HOST: postgresql
        AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
        AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
        AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      volumes:
        - ./data/authentik/media:/media
        - ./data/authentik/custom-templates:/templates
      env_file:
        - .env
      ports:
        - "${COMPOSE_PORT_HTTP:-9000}:9000"
        - "${COMPOSE_PORT_HTTPS:-9443}:9443"
      depends_on:
        postgresql:
          condition: service_healthy
        redis:
          condition: service_healthy
    worker:
      image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.6.4}
      restart: unless-stopped
      command: worker
      environment:
        AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY:?secret key required}
        AUTHENTIK_REDIS__HOST: redis
        AUTHENTIK_POSTGRESQL__HOST: postgresql
        AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
        AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
        AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      # `user: root` and the docker socket volume are optional.
      # See more for the docker socket integration here:
      # https://goauthentik.io/docs/outposts/integrations/docker
      # Removing `user: root` also prevents the worker from fixing the permissions
      # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
      # (1000:1000 by default)
      user: root
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
        - ./data/authentik/media:/media
        - ./data/authentik/certs:/certs
        - ./data/authentik/custom-templates:/templates
      env_file:
        - .env
      depends_on:
        postgresql:
          condition: service_healthy
        redis:
          condition: service_healthy