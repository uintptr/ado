
# Upgrade WebSocket if requested, otherwise use keepalive
map $http_upgrade $connection_upgrade_keepalive {
    default upgrade;
    ''      '';
}

# TODO https://ssl-config.mozilla.org/#server=nginx&version=1.27.3&config=intermediate&openssl=3.4.0&guideline=5.7
server {
        listen 443 ssl;
        http2 on;
        server_name auth.__DOMAIN_NAME__;

        # SSL Configuration
        ssl_certificate /etc/certs/fullchain.pem;
        ssl_certificate_key /etc/certs/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # header from upstream' error when trying to access an application protected by goauthentik
        proxy_buffers 8 16k;
        proxy_buffer_size 32k;

        # Security Headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header 'Access-Control-Allow-Origin' '*' always;

        location "/" {
                proxy_pass https://server:9000;
                proxy_http_version 1.1;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header Host $http_host;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection $connection_upgrade_keepalive;
        }
}

server {
        listen 443 ssl;
        http2 on;
        server_name www.__DOMAIN_NAME__;

        # SSL Configuration
        ssl_certificate /etc/certs/fullchain.pem;
        ssl_certificate_key /etc/certs/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # header from upstream' error when trying to access an application protected by goauthentik
        proxy_buffers 8 16k;
        proxy_buffer_size 32k;

        # Security Headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header 'Access-Control-Allow-Origin' '*' always;

        # Performance Settings
        gzip on;
        gzip_vary on;
        gzip_min_length 1000;
        gzip_types
                text/plain
                text/css
                application/json
                application/javascript
                text/xml
                application/xml
                application/xml+rss
                text/javascript
                application/wasm;

        keepalive_timeout 65;
        client_max_body_size 10M;


        location "/search" {
                rewrite ^/search$ /index.html?$args last;
        }

        location "/" {
                root /var/www/;
                index index.html;
                try_files $uri $uri/ =404;

                ##############################
                # authentik-specific config
                ##############################
                auth_request     /outpost.goauthentik.io/auth/nginx;
                error_page       401 = @goauthentik_proxy_signin;
                auth_request_set $auth_cookie $upstream_http_set_cookie;
                add_header       Set-Cookie $auth_cookie;

                # translate headers from the outposts back to the actual upstream
                auth_request_set $authentik_username $upstream_http_x_authentik_username;
                auth_request_set $authentik_groups $upstream_http_x_authentik_groups;
                auth_request_set $authentik_entitlements $upstream_http_x_authentik_entitlements;
                auth_request_set $authentik_email $upstream_http_x_authentik_email;
                auth_request_set $authentik_name $upstream_http_x_authentik_name;
                auth_request_set $authentik_uid $upstream_http_x_authentik_uid;

                proxy_set_header X-authentik-username $authentik_username;
                proxy_set_header X-authentik-groups $authentik_groups;
                proxy_set_header X-authentik-entitlements $authentik_entitlements;
                proxy_set_header X-authentik-email $authentik_email;
                proxy_set_header X-authentik-name $authentik_name;
                proxy_set_header X-authentik-uid $authentik_uid;

                # This section should be uncommented when the "Send HTTP Basic authentication" option
                # is enabled in the proxy provider
                # auth_request_set $authentik_auth $upstream_http_authorization;
                # proxy_set_header Authorization $authentik_auth;
        }

        location "/google" {
                proxy_pass https://www.googleapis.com/customsearch/v1/;
                access_log off;
                error_log /dev/null crit;
                proxy_set_header Host www.googleapis.com;
                proxy_set_header Referer "";
                expires 10m;
                add_header Cache-Control "public, max-age=600";
        }

        location "/webdis/"{
                proxy_pass http://webdis:7379/;
                access_log off;
                error_log /dev/null crit;
                proxy_set_header Referer "";
        }



        # all requests to /outpost.goauthentik.io must be accessible without authentication
        location /outpost.goauthentik.io {
                # When using the embedded outpost, use:
                proxy_pass              https://auth.__DOMAIN_NAME__/outpost.goauthentik.io;
                # For manual outpost deployments:
                #proxy_pass              http://server:9000;

                # Note: ensure the Host header matches your external authentik URL:
                proxy_set_header        Host $host;

                proxy_set_header        X-Original-URL $scheme://$http_host$request_uri;
                add_header              Set-Cookie $auth_cookie;
                auth_request_set        $auth_cookie $upstream_http_set_cookie;
                proxy_pass_request_body off;
                proxy_set_header        Content-Length "";
        }

        # Special location for when the /auth endpoint returns a 401,
        # redirect to the /start URL which initiates SSO
        location @goauthentik_proxy_signin {
                internal;
                add_header Set-Cookie $auth_cookie;
                return 302 /outpost.goauthentik.io/start?rd=$scheme://$http_host$request_uri;
                # For domain level, use the below error_page to redirect to your authentik server with the full redirect path
                # return 302 https://authentik.company/outpost.goauthentik.io/start?rd=$scheme://$http_host$request_uri;
        }
}